{"version":3,"sources":["../src/Security.js"],"names":["Security","props","initialAuthService","authService","AuthService","getAuthState","authState","setAuthState","unsub","on","_oktaAuth","token","isLoginRedirect","updateAuthState","children"],"mappings":";;;;;;;;;;AAYA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,WAAW,SAAXA,QAAW,CAACC,KAAD,EAAW;;AAE1B,MAAMC,qBAAqB,oBAAS,YAAM;AACxC;AACA,WAAOD,MAAME,WAAN,IAAqB,IAAIC,qBAAJ,CAAgBH,KAAhB,CAA5B;AACD,GAH0B,EAGxB,CAAEA,KAAF,CAHwB,CAA3B;;AAF0B,kBAOJ,qBAAUC,kBAAV,CAPI;AAAA;AAAA,MAOnBC,WAPmB;;AAAA,mBAQQ,qBAASA,YAAYE,YAAZ,EAAT,CARR;AAAA;AAAA,MAQnBC,SARmB;AAAA,MAQRC,YARQ;;AAU1B,wBAAW,YAAM;AACf,QAAMC,QAAQL,YAAYM,EAAZ,CAAe,iBAAf,EAAkC,YAAM;AACpDF,mBAAaJ,YAAYE,YAAZ,EAAb;AACD,KAFa,CAAd;;AAIA,QAAI,CAACF,YAAYO,SAAZ,CAAsBC,KAAtB,CAA4BC,eAA5B,EAAL,EAAoD;AAClD;AACAT,kBAAYU,eAAZ;AACD;AACD,WAAOL,KAAP;AACD,GAVD,EAUG,CAACL,WAAD,CAVH;;AAYA,SACE;AAAC,yBAAD,CAAa,QAAb;AAAA,MAAsB,OAAQ,EAAEA,wBAAF,EAAeG,oBAAf,EAA9B;AACGL,UAAMa;AADT,GADF;AAKD,CA3BD,C,CAhBA;;;;;;;;;;;;kBA6Ced,Q","file":"Security.js","sourcesContent":["/*\n * Copyright (c) 2017-Present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport React, { useState, useEffect, useMemo } from 'react';\nimport AuthService from './AuthService';\nimport OktaContext from './OktaContext';\n\nconst Security = (props) => { \n\n  const initialAuthService = useMemo( () => { \n    // don't keep spawning new service instances if this component rerenders\n    return props.authService || new AuthService(props);\n  }, [ props ]);\n\n  const [authService] = useState( initialAuthService );\n  const [authState, setAuthState] = useState(authService.getAuthState());\n  \n  useEffect( () => { \n    const unsub = authService.on('authStateChange', () => {\n      setAuthState(authService.getAuthState());\n    });\n\n    if (!authService._oktaAuth.token.isLoginRedirect()) {\n      // Trigger an initial change event to make sure authState is latest when not in loginRedirect state\n      authService.updateAuthState(); \n    }\n    return unsub;\n  }, [authService]);\n\n  return (\n    <OktaContext.Provider value={ { authService, authState } }>\n      {props.children}\n    </OktaContext.Provider>\n  );\n};\n\nexport default Security;\n"]}